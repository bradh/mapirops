#! /usr/bin/env python
# encoding: utf-8

from waflib.Task import Task
from waflib.TaskGen import extension
from waflib.Tools import c_config
import os

APPNAME = 'mapirops'
VERSION	= '0.1'

def options(ctx):
    ctx.load('compiler_c')

def set_options(opt):
    ctx.add_option('--with-mapirops-debug',
                   help=("enable mapirops compiler debug output"),
                   action="store_true", dest='enable_mapirops_debug')

def configure(ctx):
    ctx.load('compiler_c')

    ctx.define('_GNU_SOURCE', 1)
    ctx.env.append_value('CCDEFINES', '_GNU_SOURCE=1')

    # Check headers
    ctx.check(header_name='sys/types.h')
    ctx.check(header_name='asm/byteorder.h')
    ctx.check(header_name='stdint.h')
    ctx.check(header_name='stddef.h')
    ctx.check(header_name='stdio.h')
    ctx.check(header_name='stdlib.h')
    ctx.check(header_name='stdbool.h')
    ctx.check(header_name='stdarg.h')
    ctx.check(header_name='syslog.h')
    ctx.check(header_name='iconv.h')
    ctx.check(header_name='ctype.h')

    # Check types
    ctx.check(type_name='uint8_t')
    ctx.check(type_name='uint16_t')
    ctx.check(type_name='uint32_t')
    ctx.check(type_name='uint64_t')
    ctx.check(type_name='double')
    ctx.check(type_name='int')
    ctx.check(type_name='int8_t')
    ctx.check(type_name='int16_t')
    ctx.check(type_name='int32_t')
    ctx.check(type_name='int64_t')
    ctx.check(type_name='size_t', header_name='stddef.h')
    ctx.check(type_name='bool', header_name='stdbool.h')
    ctx.check(type_name='iconv_t', header_name='iconv.h')

    # Check functions
    ctx.check_cc(function_name='vasprintf', header_name='stdio.h', mandatory=True)
    ctx.check_cc(function_name='memcpy', header_name='string.h', mandatory=True)
    ctx.check_cc(function_name='strnlen', header_name='string.h', mandatory=True)
    ctx.check_cc(function_name='vsyslog', header_name='syslog.h', mandatory=True)
    ctx.check_cc(function_name='openlog', header_name='syslog.h', mandatory=True)
    ctx.check_cc(function_name='iconv', header_name='iconv.h', mandatory=True)
    ctx.check_cc(function_name='iconv_open', header_name='iconv.h', mandatory=True)
    ctx.check_cc(function_name='iconv_close', header_name='iconv.h', mandatory=True)
    ctx.check_cc(function_name='isprint', header_name='ctype.h', mandatory=True)

    # Check external libraries and packages
    ctx.check_cfg(atleast_pkgconfig_version='0.20')
    ctx.check_cfg(package='talloc',
                  args=['talloc >= 2.0.7', '--cflags', '--libs'],
                  uselib_store='TALLOC',
                  msg="Checking for talloc 2.0.7",
                  mandatory=True)

    ctx.check_cfg(package='check',
                  args=['check >= 0.9.8', '--cflags', '--libs'],
                  uselib_store='CHECK',
                  msg="Checking for check 0.9.8",
                  mandatory=True)

    ctx.check_cfg(package='popt',
                  args=['popt >= 1.16', '--cflags', '--libs'],
                  uselib_store='POPT',
                  msg="Checking for libpopt 1.16",
                  mandatory=True)

class mr(Task):
    run_str = '../mapirops/mapirops.py --file ${SRC} --outputdir=mr --mapi-gen'
    color = 'BLUE'
    ext_out = ['.h', '.c']

@extension('.mr')
def process_mr(self, node):
    mr_node = node.change_ext('.c')
    self.create_task('mr', node, [mr_node])
    self.source.append(mr_node)

def build(bld):
    if bld.cmd == 'doc':
        bld(
            features = 'doxygen',
            doxyfile = 'libmapirops.doxy',
            doxy_tar = 'docs.tar.bz2')
    else:
        target = bld.shlib(
            features = 'c cshlib',
            source = [
                '../mr/oxcstor.mr',
                'mapirops.c',
                'mapirops_print.c',
                'util.c',
                'uuid.c'],
            target = APPNAME,
            vnum = VERSION,
            cflags = ['-ggdb'],
            includes = ['.', '..', '../mr/', 'build/'],
            use = ['TALLOC']
            )

        bld.program(
            source = [
                'testsuite/testsuite.c',
                'testsuite/testsuite_oxcstor.c'
                ],
            target = '../mapirops_testsuite',
            includes = ['.', '..', '../mr', 'build/'],
            cflags = ['-ggdb'],
            depends_on = [APPNAME],
            use = [APPNAME, 'TALLOC', 'CHECK', 'POPT'])

from waflib.Build import BuildContext
class doc_class(BuildContext):
    cmd = 'doc'
